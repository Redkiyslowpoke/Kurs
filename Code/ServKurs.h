/** @file
 * @author Воронин Н.А.
 * @date 01.05.2023
 * @copyright ИБСТ ПГУ
 * @brief Заголовочный файл проекта
 */
#pragma once
#include <netinet/in.h>
#include <iostream>
#include <clocale>
#include <arpa/inet.h>
#include <cstdlib>
#include <unistd.h>
#include <random>
#include <string>
#include <getopt.h>
#include <cctype>
#include <cstdint>
#include <fstream>
#include <vector>
#include <ctime>
#include <cryptopp/hex.h>
#define CRYPTOPP_ENABLE_NAMESPACE_WEAK 1
#include <cryptopp/md5.h>

/**
* @brief Класс для работы с данными клиентов
* @details В классе реализованы функции для идентификации и аутификации клиентов, обработки присылаемых ими значений  
*/
class WorkWithClient
{
private:
    std::ofstream ferr; ///<файл для записи ошибок
    std::string allclients;///<список всех клиентов и их паролей
    std::string clientpar;///<пароль идентифицированного клиента
    std::string salt = "";///<переменная для хранения созданного случайного числа
    /**
     * @brief Преобразование числа из десятичной системы в шестнадцатеричную
     * @details Функция преобразует число в строку шестнадцатеричных цифр.
     * @param [in] decnum Число для преобразования.
     * @return Строка из шестнадцатеричных цифр
     */
    std::string inttohex(const uint64_t decnum);

public:
    WorkWithClient() = delete;///<запрет конструктора без параметров
    
    /**
     * @brief Конструктор
     * @details Конструктор открывает, считывает и закрывает файл базы клиентов; открывает файл для записи ошибок и проверяет выбранный порт.
     * @param [in] bazep_adr Адрес файла с базой клиентов.
     * Адрес может быть полным путем или относительным путем для подкаталогов папки сервера.
     * @param [in] ferr_adr Адрес файла для записи ошибок.
     * Адрес может быть полным путем или относительным путем для подкаталогов папки сервера.
     * @param [in] n_port Номер порта, выбранного для сервера. 
     * @warning Порты со значением от 1024 зарезервированы системными приложениями и являются недопустимыми
     * @throw string, если произошла ошибка открытия или чтения файла базы клиентов, ошибка открытия файла записи ошибок
     * или выбранный порт меньше 1025 или больше 65535.
     */
    WorkWithClient(const std::string bazep_adr, const std::string ferr_adr, const int n_port);
    
    /**
     * @brief Деструктор
     * @details Деструктор закрывает файл для записи ошибок.
     */
    ~WorkWithClient();
    
    /**
     * @brief Формирование случайного числа
     * @details Функция формирует строку длиной 16 со случайным шестнадцатеричным числом.
     * Число может принимать значения от 1 до 16^16-1. Нужная длина строки достигается дополнением слева цифрами "0".
     * @warning Для преобразования числа из десятичной системы в шестнадцатеричную используется функция inttohex.
     * @return Строка из 16 шестнадцатеричных цифр
     */
    std::string makesalt();
    
    /**
     * @brief Проверка ID клиента
     * @details Функция проверяет наличие переданного ID в списке клиентов и записывает в переменную clientpar соответствующий данному ID пароль.
     * @return true, если такой ID есть в списке и false, если его нет
     */
    bool checID(const std::string newid);
    
    /**
     * @brief Проверка пароля клиента
     * @details Функция соединяет сформированное случайное число с паролем из файла, хеширует полученную строку функцией MD5
     * и сравниваеет полученную строку со строкой, переданной клиентом.
     * @param [in] parol_to_chek Строка, переданная клиентом.
     * @return true, если строки совпадают и false, если нет
     */
    bool checparol(const std::string parol_to_chek);
    
    /**
     * @brief Перемножение значений вектора
     * @details Функция перемножает полученные значения и возвращает результат
     * @param [in] len Количество перемножаемых чисел.
     * @param [in] data Вектор содержащий перемножаемые числа.
     * @warning При переполнении вверх возвращается 2^31-1, при переполнении вниз возвращается -2^31.
     * @return Произведение чисел
     */
    int32_t count(const uint32_t len, const int32_t* data);
    
    /**
     * @brief Запись ошибок в файл
     * @details Функция производит запись возникающих ошибок в формате "'дата'  'критичность' – 'причина ошибки'"
     * @param [in] krit Критичность ошибки.
     * @param [in] reazon Причина ошибки.
     */
    void errrecord(const std::string krit, const std::string reazon);
};
